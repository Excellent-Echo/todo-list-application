{"version":3,"sources":["assets/doit-logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Task","task","index","doneTask","removeTask","className","style","textDecoration","isDone","onClick","TaskForm","addTask","React","useState","value","setVal","onSubmit","e","preventDefault","type","onChange","target","placeholder","App","tasks","setTasks","newTasks","splice","src","logo","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAAe,G,MAAA,IAA0B,uC,OCOzC,SAASA,EAAT,GAAsD,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACrC,OACE,sBACEC,UAAY,OACZC,MAAS,CAAEC,eAAgBN,EAAKO,OAAS,eAAiB,IAF5D,UAII,6BACIP,EAAKA,OAGX,gCACE,wBAAQI,UAAU,WAAWI,QAAW,kBAAMN,EAASD,IAAvD,kBAGA,wBAAQG,UAAU,UAAUI,QAAW,kBAAML,EAAWF,IAAxD,0BAQR,SAASQ,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QAAW,EACHC,IAAMC,SAAS,IADZ,mBACrBC,EADqB,KACdC,EADc,KAU7B,OACE,sBAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACIJ,IACNH,EAAQG,GACRC,EAAO,MAIP,SACE,uBACEI,KAAO,OACPd,UAAY,UACZS,MAAUA,EACVM,SAAa,SAAAH,GAAC,OAAIF,EAAOE,EAAEI,OAAOP,QAClCQ,YAAc,0BAyDPC,MAnDf,WAAgB,IAAD,EAEaX,IAAMC,SAAS,CACvC,CACEZ,KAAM,oBACNO,QAAQ,KALC,mBAENgB,EAFM,KAECC,EAFD,KAcPtB,EAAW,SAAAD,GACf,IAAMwB,EAAQ,YAAOF,GACrBE,EAASxB,GAAOM,QAAS,EACzBiB,EAASC,IAGLtB,EAAa,SAAAF,GACjB,IAAMwB,EAAQ,YAAOF,GACrBE,EAASC,OAAOzB,EAAO,GACvBuB,EAASC,IAGX,OACE,qBAAKrB,UAAU,MAAf,SACE,gCACE,qBAAKA,UAAU,eAAf,SACE,qBAAKuB,IAAOC,MAEd,sBAAKxB,UAAU,YAAf,UACImB,EAAMM,KAAI,SAAC7B,EAAMC,GAAP,OACV,cAACF,EAAD,CAEEE,MAAUA,EACVD,KAASA,EACTE,SAAaA,EACbC,WAAeA,GAJPF,MAQZ,cAACQ,EAAD,CAAUC,QAlCF,SAAAV,GACd,IAAMyB,EAAQ,sBAAOF,GAAP,CAAc,CAAEvB,UAC9BwB,EAAUC,eCnDCK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6c810379.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/doit-logo.1acf484d.svg\";","import React from 'react';\nimport './App.css';\nimport logo from './assets/doit-logo.svg';\n\n// import { Container, Row, Col, Form, Card, Alert, Button, Tabl } from 'react-bootstrap';\n// import 'bootstrap/dist/css/boostrap.min.css';\n\nfunction Task({ task, index, doneTask, removeTask }) {\n  return (\n    <div \n      className = \"task\"\n      style = {{ textDecoration: task.isDone ? \"line-through\" : \"\" }}\n    >\n        <h2>\n          { task.task }\n        </h2>\n\n      <div>\n        <button className=\"btn-done\" onClick = {() => doneTask(index)}>\n          Done  \n        </button>\n        <button className=\"btn-del\" onClick = {() => removeTask(index)}>\n          Delete\n        </button>        \n      </div>\n    </div>\n  );\n};\n\nfunction TaskForm({ addTask }) {\n  const [ value, setVal ] = React.useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if ( !value ) return;\n    addTask(value);\n    setVal(\"\");\n  };\n\n  return (\n    <form onSubmit = { handleSubmit }>\n      <input\n        type = \"text\"\n        className = \"addTask\"\n        value = { value }\n        onChange = { e => setVal(e.target.value) }\n        placeholder = \"Enter new task here\"\n      />\n    </form>\n  )\n}\n\nfunction App() {\n\n  const [tasks, setTasks] = React.useState([\n    {\n      task: \"Complete this app\",\n      isDone: false\n    },\n  ]);\n\n  const addTask = task => {\n    const newTasks = [...tasks, { task }];\n    setTasks( newTasks );\n  }\n\n  const doneTask = index => {\n    const newTasks = [...tasks];\n    newTasks[index].isDone = true;\n    setTasks(newTasks);\n  }\n\n  const removeTask = index => {\n    const newTasks = [...tasks];\n    newTasks.splice(index, 1);\n    setTasks(newTasks);\n  }\n\n  return (\n    <div className=\"app\">\n      <div>\n        <div className=\"lg-container\">\n          <img src= { logo }/>\n        </div>\n        <div className=\"task-list\">\n          { tasks.map((task, index) => (\n            <Task\n              key = { index }\n              index = { index }\n              task = { task }\n              doneTask = { doneTask }\n              removeTask = { removeTask }\n            />\n          ))}\n\n          <TaskForm addTask = { addTask } />\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}